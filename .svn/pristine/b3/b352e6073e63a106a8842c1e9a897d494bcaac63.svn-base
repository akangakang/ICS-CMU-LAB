#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#NAME:  Liu Shuchang 
#ID:  518021910789
#
# Describe how and why you modified the baseline code.
#1.use iaddq
#   it can replace two instructions
#   irmovq $8, %r10
#   addq %r10, %rdi
#
# 2.loop unrolling  --> reduce loop overhead operations
#   I choose 10*1 loop unrolling, using all the registers I can use 
#   For the rest blocks ( 0 - 9 ), which affect CPE a lot , I didn't find then one by one
#     |-----------|------------|
#    012          3         456789
#  |--|--|                  |-----|----|
#  0 1  2              45      6   789
#
# 3. delete xorq %rax,%rax
#    %rax is 0 originally
#
# 4. load/use hazard
#    mrmovq (%rdi), %r8
#    rmmovq %r8, (%rsi)
#    there will be bubble between them, so I change the order of some instructions.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	iaddq $-10, %rdx 	# len - 10 , set CC
	jl root		# if len - 10 >= 0 into loop
Loop:
	mrmovq (%rdi),   %r8		# read val from src
	mrmovq 8(%rdi),  %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	mrmovq 56(%rdi), %rcx
	mrmovq 64(%rdi), %rbx
	mrmovq 72(%rdi), %rbp
	rmmovq %r8,  (%rsi)	  		# store it to dst
	rmmovq %r9,  8(%rsi)
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	rmmovq %r12, 32(%rsi)
	rmmovq %r13, 40(%rsi)
	rmmovq %r14, 48(%rsi)
	rmmovq %rcx, 56(%rsi)
	rmmovq %rbx, 64(%rsi)
	rmmovq %rbp, 72(%rsi)
	andq %r8, %r8 					
	jle L1
        iaddq $1, %rax				# %r8 > 0 , count ++
L1:	andq %r9, %r9
	jle L2	
	iaddq $1, %rax 					# %r9 > 0 , count ++
L2:	andq %r11, %r11
	jle L3
	iaddq $1, %rax					# %r11 > 0 , count ++
L3:	andq %r12, %r12
	jle L4
	iaddq  $1 , %rax				# %r12> 0 , count ++
L4:	andq %r13, %r13
	jle L5	
	iaddq $1, %rax 					# %r13 > 0 , count ++
L5:	andq %r14, %r14
	jle L6
	iaddq $1, %rax					# %r14 > 0 , count ++
L6:	andq %rcx, %rcx
	jle L7	
	iaddq $1, %rax 					# %rcx > 0 , count ++
L7:	andq %r10, %r10
	jle L8
	iaddq $1, %rax					# %r10 > 0 , count ++
L8:	andq %rbx, %rbx
	jle L9
	iaddq $1, %rax					# %rbx> 0 , count ++
L9: 	andq %rbp, %rbp
	jle L10
	iaddq $1, %rax					# %rbp> 0 , count ++
L10:	iaddq $80, %rdi
	iaddq $80, %rsi
	iaddq $-10, %rdx	
	jge Loop
root: 											#remaining
	iaddq $7, %rdx					# len + 10 - 3
	jg R     									  # len > 3
	jl L											# len < 3
	jmp remain3							# len == 3
L:
	iaddq $2, %rdx					# len + 10 - 3 + 2 (%rdx: -2 -> 1; -1 -> 2; -3 -> 0)
	je remain1
	iaddq $-1 ,%rdx
	je remain2
	ret
R:
	iaddq $-3, %rdx				# len + 10 -3 -3
	jg RR									# len > 6 ( 7 8 9 )
	je remain6							# len == 6
RL:	iaddq $1, %rdx
	je remain5
	jmp remain4
RR:
	iaddq $-2, %rdx		# len +10 -9 (%rdx: 1 -> 9; 0 -> 8; -1 -> 7)
	jl remain7
	je remain8
	mrmovq 64(%rdi), %r8
	andq %r8, %r8
	rmmovq %r8, 64(%rsi)
remain8:
	mrmovq 56(%rdi), %r8
	jle r8
	iaddq $1, %rax		# remain9 > 0 , count ++
r8:	andq %r8, %r8
	rmmovq %r8, 56(%rsi)
remain7:
	mrmovq 48(%rdi), %r8
	jle r7
	iaddq $1, %rax		# remain8 > 0, count ++
r7:	andq %r8, %r8
	rmmovq %r8, 48(%rsi)
remain6:
	mrmovq 40(%rdi), %r8
	jle r6
	iaddq $1, %rax		# remain7
r6:	rmmovq %r8, 40(%rsi)
	andq %r8, %r8
remain5:
	mrmovq 32(%rdi), %r8
	jle r5
	iaddq $1, %rax		# remain6
r5:	andq %r8, %r8
	rmmovq %r8, 32(%rsi)
remain4:
	mrmovq 24(%rdi), %r8
	jle r4
	iaddq $1, %rax		# remain5
r4:	andq %r8, %r8
	rmmovq %r8, 24(%rsi)
remain3:
	mrmovq 16(%rdi), %r8
	jle r3
	iaddq $1, %rax		# remain4
r3:	andq %r8, %r8
	rmmovq %r8, 16(%rsi)
remain2:
	mrmovq 8(%rdi), %r8
	jle r2
	iaddq $1, %rax		# remain3
r2:	andq %r8, %r8
	rmmovq %r8, 8(%rsi)
	jle remain1
	iaddq $1, %rax		# remain2
remain1:
	mrmovq (%rdi), %r8
	andq %r8, %r8
	rmmovq %r8, (%rsi)
	jle Done
	iaddq $1, %rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
